<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>TONGの博客</title>
  
  <subtitle>TONG.top</subtitle>
  <link href="https://dingzhenchen.github.io/atom.xml" rel="self"/>
  
  <link href="https://dingzhenchen.github.io/"/>
  <updated>2023-02-01T09:00:00.000Z</updated>
  <id>https://dingzhenchen.github.io/</id>
  
  <author>
    <name>TONG</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>测试基础</title>
    <link href="https://dingzhenchen.github.io/2023/02/01/%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    <id>https://dingzhenchen.github.io/2023/02/01/%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/</id>
    <published>2023-02-01T09:00:00.000Z</published>
    <updated>2023-02-01T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试基础"><a href="#测试基础" class="headerlink" title="测试基础"></a>测试基础</h1><h2 id="基础测试路线"><a href="#基础测试路线" class="headerlink" title="基础测试路线"></a>基础测试路线</h2><p><img src="/img/1000.png" alt=""></p><h2 id="常用测试分类"><a href="#常用测试分类" class="headerlink" title="常用测试分类"></a>常用测试分类</h2><h3 id="测试主流技能"><a href="#测试主流技能" class="headerlink" title="测试主流技能"></a>测试主流技能</h3><p>功能测试<br>功能测试主要验证程序的功能是否符合需求<br>自动化测试<br>使用代码或者工具代替人工验证项目功能<br>接口测试<br>针对模块与模块或者系统与系统之间的数据请求地址进行测试<br>性能测试<br>模拟多人使用软件，查找服务器缺陷</p><h3 id="按测试阶段划分"><a href="#按测试阶段划分" class="headerlink" title="按测试阶段划分"></a>按测试阶段划分</h3><p><img src="/img/1001.png" alt=""></p><h3 id="按代码可见度划分"><a href="#按代码可见度划分" class="headerlink" title="按代码可见度划分"></a>按代码可见度划分</h3><p><img src="/img/1002.png" alt=""><br>黑盒测试又称功能测试<br>灰盒测试又称接口测试<br>白盒测试又称单元测试</p><h3 id="扩展总结"><a href="#扩展总结" class="headerlink" title="扩展总结"></a>扩展总结</h3><p>系统测试和黑盒测试重点核心是功能测试<br>集成测试和灰盒测试又称接口测试<br>单元测试和白盒测试对代码进行测试<br>自动化测试归属功能测试<br>性能测试安全测试归属专项测试</p><h3 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h3><h2 id="冒烟测试"><a href="#冒烟测试" class="headerlink" title="冒烟测试"></a>冒烟测试</h2><p>大规模测试之前，对主程序进行验证，保证程序具有可测性<br>面试题提测标准时什么 —冒烟测试通过 测试之前要怎么做？<br>—冒烟测试</p><h2 id="测试模型"><a href="#测试模型" class="headerlink" title="测试模型"></a>测试模型</h2><h3 id="质量模型"><a href="#质量模型" class="headerlink" title="质量模型"></a>质量模型</h3><p><img src="/img/1003.png" alt=""><br><img src="/img/1004.png" alt=""><br>质量模型提供测试设计的不同角度视野和验证方向</p><h3 id="测试模型-1"><a href="#测试模型-1" class="headerlink" title="测试模型"></a>测试模型</h3><h4 id="w模型"><a href="#w模型" class="headerlink" title="w模型"></a>w模型</h4><p>w模型简称双v模型，即开发为主导的v和另一个以测试为主导的v构成</p><h2 id="测试流程"><a href="#测试流程" class="headerlink" title="测试流程"></a>测试流程</h2><h3 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h3><p>前置:阅读需求分析文档，记录不明确之处<br>确保各部门需求理解一致<br>各部门在不同角度对需求进行查漏补缺</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;测试基础&quot;&gt;&lt;a href=&quot;#测试基础&quot; class=&quot;headerlink&quot; title=&quot;测试基础&quot;&gt;&lt;/a&gt;测试基础&lt;/h1&gt;&lt;h2 id=&quot;基础测试路线&quot;&gt;&lt;a href=&quot;#基础测试路线&quot; class=&quot;headerlink&quot; title=&quot;基础测试路</summary>
      
    
    
    
    <category term="测试，基础知识" scheme="https://dingzhenchen.github.io/categories/%E6%B5%8B%E8%AF%95%EF%BC%8C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="测试基础" scheme="https://dingzhenchen.github.io/tags/%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>异常</title>
    <link href="https://dingzhenchen.github.io/2023/01/09/%E5%BC%82%E5%B8%B8/"/>
    <id>https://dingzhenchen.github.io/2023/01/09/%E5%BC%82%E5%B8%B8/</id>
    <published>2023-01-09T09:00:00.000Z</published>
    <updated>2023-01-09T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h1><h2 id="异常体系"><a href="#异常体系" class="headerlink" title="异常体系"></a>异常体系</h2><p><img src="/img/198.png" alt=""><br><img src="/img/197.png" alt=""></p><h2 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h2><p><img src="/img/199.png" alt=""><br><img src="/img/200.png" alt=""><br><img src="/img/201.png" alt=""></p><h2 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h2><p><img src="/img/202.png" alt=""></p><h2 id="throw关键字"><a href="#throw关键字" class="headerlink" title="throw关键字"></a>throw关键字</h2><p><img src="/img/203.png" alt=""><br><img src="/img/204.png" alt=""></p><h3 id="try…catch"><a href="#try…catch" class="headerlink" title="try…catch"></a>try…catch</h3><p><img src="/img/205.png" alt=""></p><h3 id="throwable方法"><a href="#throwable方法" class="headerlink" title="throwable方法"></a>throwable方法</h3><p><img src="/img/206.png" alt=""><br><img src="/img/207.png" alt=""></p><h2 id="异常处理注意事项"><a href="#异常处理注意事项" class="headerlink" title="异常处理注意事项"></a>异常处理注意事项</h2><h3 id="多个异常的捕获处理"><a href="#多个异常的捕获处理" class="headerlink" title="多个异常的捕获处理"></a>多个异常的捕获处理</h3><p><img src="/img/208.png" alt=""><br><img src="/img/209.png" alt=""><br>finally的return语句<br><img src="/img/210.png" alt=""><br>子父类异常<br><img src="/img/211.png" alt=""><br>自定义异常<br><img src="/img/212.png" alt=""><br><img src="/img/213.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;异常&quot;&gt;&lt;a href=&quot;#异常&quot; class=&quot;headerlink&quot; title=&quot;异常&quot;&gt;&lt;/a&gt;异常&lt;/h1&gt;&lt;h2 id=&quot;异常体系&quot;&gt;&lt;a href=&quot;#异常体系&quot; class=&quot;headerlink&quot; title=&quot;异常体系&quot;&gt;&lt;/a&gt;异常体系&lt;/h</summary>
      
    
    
    
    <category term="java，基础知识，JAVASE" scheme="https://dingzhenchen.github.io/categories/java%EF%BC%8C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%8CJAVASE/"/>
    
    
    <category term="javase" scheme="https://dingzhenchen.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>多线程</title>
    <link href="https://dingzhenchen.github.io/2023/01/09/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    <id>https://dingzhenchen.github.io/2023/01/09/%E5%A4%9A%E7%BA%BF%E7%A8%8B/</id>
    <published>2023-01-09T09:00:00.000Z</published>
    <updated>2023-01-09T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h1><p>并发指两个或多个事件在同一时间段内发生<br>并行指两个事件在同一时刻发生(同时发生)<br><img src="/img/214.png" alt=""></p><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><p><img src="/img/215.png" alt=""></p><h1 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h1><p><img src="/img/216.png" alt=""><br><img src="/img/217.png" alt=""></p><h1 id="线程调度"><a href="#线程调度" class="headerlink" title="线程调度"></a>线程调度</h1><p><img src="/img/218.png" alt=""></p><h1 id="线程-1"><a href="#线程-1" class="headerlink" title="线程"></a>线程</h1><h2 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h2><h3 id="执行main方法的线程"><a href="#执行main方法的线程" class="headerlink" title="执行main方法的线程"></a>执行main方法的线程</h3><p>单线程程序：java程序中只有一个线程<br>从main方法开始，从上到下依次执行<br><img src="/img/219.png" alt=""></p><h3 id="创建多线程"><a href="#创建多线程" class="headerlink" title="创建多线程"></a>创建多线程</h3><p><img src="/img/220.png" alt=""><br><img src="/img/221.png" alt=""></p><h3 id="多线程原理"><a href="#多线程原理" class="headerlink" title="多线程原理"></a>多线程原理</h3><p><img src="/img/222.png" alt=""><br><img src="/img/223.png" alt=""><br><img src="/img/224.png" alt=""><br><img src="/img/225.png" alt=""></p><h3 id="sleep方法"><a href="#sleep方法" class="headerlink" title="sleep方法"></a>sleep方法</h3><p><img src="/img/226.png" alt=""></p><h3 id="Thread和runable接口的区别"><a href="#Thread和runable接口的区别" class="headerlink" title="Thread和runable接口的区别"></a>Thread和runable接口的区别</h3><p><img src="/img/227.png" alt=""></p><h3 id="匿名内部类实现线程的创建"><a href="#匿名内部类实现线程的创建" class="headerlink" title="匿名内部类实现线程的创建"></a>匿名内部类实现线程的创建</h3><p><img src="/img/228.png" alt=""></p><h3 id="线程安全问题"><a href="#线程安全问题" class="headerlink" title="线程安全问题"></a>线程安全问题</h3><p><img src="/img/229.png" alt=""><br><img src="/img/230.png" alt=""><br>解决方式：同步代码块<br><img src="/img/231.png" alt=""><br><img src="/img/232.png" alt=""></p><h3 id="同步方法"><a href="#同步方法" class="headerlink" title="同步方法"></a>同步方法</h3><p><img src="/img/233.png" alt=""></p><h3 id="静态同步方法"><a href="#静态同步方法" class="headerlink" title="静态同步方法"></a>静态同步方法</h3><h3 id="Lock锁"><a href="#Lock锁" class="headerlink" title="Lock锁"></a>Lock锁</h3><p><img src="/img/234.png" alt=""></p><h3 id="线程状态概述"><a href="#线程状态概述" class="headerlink" title="线程状态概述"></a>线程状态概述</h3><p><img src="/img/235.png" alt=""><br><img src="/img/236.png" alt=""></p><h3 id="等待唤醒机制"><a href="#等待唤醒机制" class="headerlink" title="等待唤醒机制"></a>等待唤醒机制</h3><p><img src="/img/237.png" alt=""><br><img src="/img/238.png" alt=""></p><h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><p><img src="/img/239.png" alt=""><br><img src="/img/240.png" alt=""><br><img src="/img/241.png" alt=""></p><h3 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h3><p><img src="/img/242.png" alt=""><br><img src="/img/243.png" alt=""><br>File类<br>概述<br><img src="/img/244.png" alt=""><br>静态成员变量<br>window路径分隔符；window路径分隔符：<br>window名称分隔符/window名称分隔符\<br><img src="/img/245.png" alt=""><br>路径<br><img src="/img/246.png" alt=""><br>File构造方法<br><img src="/img/247.png" alt=""><br><img src="/img/248.png" alt=""><br><img src="/img/249.png" alt=""><br><img src="/img/250.png" alt=""><br>File类获取功能的方法<br><img src="/img/251.png" alt=""><br>File类判断功能的方法<br><img src="/img/252.png" alt=""><br>创建删除功能的方法</p><p>File类遍历目录功能<br>递归<br>FileFiter<br>IO流<br>字节流<br>字节输出流(OutputStream)<br>输出流写多个字节<br>字节输出流的续写和换行<br>字节输入流(InputStream)<br>字节输入流读取数据文件<br>字符流<br>字符输入流<br>字符号输入流读取数据<br>字符输出流<br>flush和close区别<br>字符流输出写数据其他方法<br>续写和换行<br>io流中的异常<br>jdk9中流异常的处理<br>jdk7中流异常的处理<br>属性集<br>缓冲流<br>序列化<br>transient关键字<br>Stream流<br>for-each方法<br>count方法<br>limit方法<br>skip方法<br>map方法</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;并发和并行&quot;&gt;&lt;a href=&quot;#并发和并行&quot; class=&quot;headerlink&quot; title=&quot;并发和并行&quot;&gt;&lt;/a&gt;并发和并行&lt;/h1&gt;&lt;p&gt;并发指两个或多个事件在同一时间段内发生&lt;br&gt;并行指两个事件在同一时刻发生(同时发生)&lt;br&gt;&lt;img src=&quot;/</summary>
      
    
    
    
    <category term="java，基础知识，JAVASE" scheme="https://dingzhenchen.github.io/categories/java%EF%BC%8C%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%EF%BC%8CJAVASE/"/>
    
    
    <category term="javase" scheme="https://dingzhenchen.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>集合</title>
    <link href="https://dingzhenchen.github.io/2023/01/08/%E9%9B%86%E5%90%88/"/>
    <id>https://dingzhenchen.github.io/2023/01/08/%E9%9B%86%E5%90%88/</id>
    <published>2023-01-08T09:00:00.000Z</published>
    <updated>2023-01-08T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="collection"><a href="#collection" class="headerlink" title="collection"></a>collection</h2><p><img src="/img/157.png" alt=""><br><img src="/img/158.png" alt=""><br><img src="/img/159.png" alt=""></p><h2 id="Interator-迭代器"><a href="#Interator-迭代器" class="headerlink" title="Interator(迭代器)"></a>Interator(迭代器)</h2><p>迭代即collection接口通用的获取元素的方法，在取元素前先判断集合中有没有元素，如果有就把元素取出来，继续判断如果还有就再去出来，一直把集合中所有的元素全部取出，这种取法专业术语称之为迭代<br>java.utill.Interator</p><h3 id="有两个常用的方法"><a href="#有两个常用的方法" class="headerlink" title="有两个常用的方法"></a>有两个常用的方法</h3><p>boolean   hasNext，如果仍有元素可以迭代返回true，判断一个集合里还有没有下个元素，如果有就返回true，没有就返回flase<br>E next() 返回迭代器的下一个对象<br>取出集合中的下一个元素<br>Interor迭代器是一个接口我们无法直接使用，需要使用Interor接口的实现对象<br>collection集合中有一个方法叫Interor，这个方法返回的就是实现类对象</p><h3 id="迭代器的使用步骤"><a href="#迭代器的使用步骤" class="headerlink" title="迭代器的使用步骤"></a>迭代器的使用步骤</h3><p>使用集合中的方法Interator获取迭代器的实现类对象，使用Interor接口接受多态<br>使用Interor中的接口的方法hasnext()判断t还有没有下一个元素、<br>使用Interor中的接口next()断还有没有下一个元素<br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">    String s=it.next();</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;  </span><br></pre></td></tr></table></figure><br><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(Interor&lt;String&gt; it=coll.interor();it.hasNext();&#123;</span><br><span class="line">     String s=it.next();</span><br><span class="line">    System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="增强for循环"><a href="#增强for循环" class="headerlink" title="增强for循环"></a>增强for循环</h3><p>底层也是迭代器，使用for循环的格式，简化了for循环的书写<br>是jdk1.5之后出现的新特性<br>Collection  extend Interable：所有单列集合都可以使用增强for循环<br>public interface Interable<E> 实现接口的允许成为’for each’语句的目标<br>增强for循环，用来遍历集合和数组<br>格式：<br>for(集合/数组的数据类型   变量名：集合名/数组名)</p><h3 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h3><p><img src="/img/160.png" alt=""><br>泛型的好处<br>1避免了类型转换带来的麻烦，存储的是什么类型。取出的就是什么类型<br>2把运行期异常，提升到了编译期<br>弊端：泛型什么类型，就只能存出什么类型的数据<br>不使用泛型的好处：<br>好处:集合不使用泛型，默认就是Object类型，可以存储任意类型的数据<br>弊端：会引发异常<br>ClassCastException<br>定义和使用含有泛型的类<br>修饰符  class  类名&lt;代表泛型的变量&gt;{<br>}<br>定义和使用含有泛型的方法<br>修饰符 泛型  返回值类型 方法名&lt;参数列表(使用泛型)&gt;{<br>}<br>定义和使用含有泛型的接口<br>含有泛型的接口：第一种使用方式定义接口的实现类，实现接口，指定接口的泛型<br>含有泛型的第二种启动方式：接口使用什么泛型，实现类就适用什么泛型，类跟着接口走<br>修饰符  interface 类名&lt;代表泛型的变量&gt;{<br>}<br><img src="/img/161.png" alt=""></p><h2 id="泛型的通配符"><a href="#泛型的通配符" class="headerlink" title="泛型的通配符"></a>泛型的通配符</h2><p>？代表任意的数据类型<br>使用方式：不能创建对象使用<br>只能作为参数的方法使用<br>泛型没有继承概念<br><img src="/img/162.png" alt=""></p><h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h2><p><img src="/img/163.png" alt=""><br><img src="/img/164.png" alt=""></p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p><img src="/img/165.png" alt=""><br><img src="/img/166.png" alt=""><br><img src="/img/167.png" alt=""><br><img src="/img/168.png" alt=""><br><img src="/img/169.png" alt=""><br><img src="/img/170.png" alt=""></p><h2 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h2><p>底层是数组<br><img src="/img/171.png" alt=""></p><h2 id="LinkedList集合"><a href="#LinkedList集合" class="headerlink" title="LinkedList集合"></a>LinkedList集合</h2><p>底层是链表<br><img src="/img/173.png" alt=""></p><h2 id="vector集合"><a href="#vector集合" class="headerlink" title="vector集合"></a>vector集合</h2><h2 id="set集合"><a href="#set集合" class="headerlink" title="set集合"></a>set集合</h2><h2 id="hashset集合"><a href="#hashset集合" class="headerlink" title="hashset集合"></a>hashset集合</h2><p><img src="/img/173.png" alt=""></p><h3 id="Hash值"><a href="#Hash值" class="headerlink" title="Hash值"></a>Hash值</h3><p><img src="/img/174.png" alt=""><br>String类重写了Object的hashcode方法<br>‘’重地’’和通话的哈希值都是1179395<br>toString的源码<br><img src="/img/175.png" alt=""></p><h4 id="hashset底层数据结构"><a href="#hashset底层数据结构" class="headerlink" title="hashset底层数据结构"></a>hashset底层数据结构</h4><p><img src="/img/176.png" alt=""><br>hashset集合元素不重复的原理<br><img src="/img/177.png" alt=""><br>LinkedHashset<br><img src="/img/178.png" alt=""><br>可变参数<br><img src="/img/179.png" alt=""><br><img src="/img/180.png" alt=""><br><img src="/img/181.png" alt=""><br><img src="/img/182.png" alt=""></p><h2 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h2><p><img src="/img/183.png" alt=""></p><h3 id="map集合的特点"><a href="#map集合的特点" class="headerlink" title="map集合的特点"></a>map集合的特点</h3><p>map是一个双列集合，一个元素包含着两个值(一个key，一个value)<br>map集合当中的元素，key和value中的数据类型可以相同，也可以不同<br>map集合当中的元素，key值是不允许重复的，value是可以重复的<br>map集合当中的元素，key和value一一对应的<br><img src="/img/184.png" alt=""></p><h2 id="map接口中的常用方法"><a href="#map接口中的常用方法" class="headerlink" title="map接口中的常用方法"></a>map接口中的常用方法</h2><p><img src="/img/185.png" alt=""><br>public  V put (K key，V value):<br>返回值：v 存储键值对的时候，key不重复，返回的是null<br>v 存储键值对的时候，key重复的，返回的是使用新的value值替换map中重复的value，返回被替代的value值<br>public  V  remove(Object   key):<br>返回值v<br>key存在  v返回被删除的元素<br>key不存在返回空<br>public get(Object key)<br>返回值v<br>key存在  v返回对应的value值的元素<br>key不存在返回null<br>public containsKey(Object Key)<br>包含返回true，不包含返回flase<br>遍历map集合<br><img src="/img/186.png" alt=""><br><img src="/img/187.png" alt=""></p><h2 id="Entry键值对对象"><a href="#Entry键值对对象" class="headerlink" title="Entry键值对对象"></a>Entry键值对对象</h2><p><img src="/img/188.png" alt=""><br><img src="/img/189.png" alt=""></p><h3 id="map遍历键值对Entry的方法"><a href="#map遍历键值对Entry的方法" class="headerlink" title="map遍历键值对Entry的方法"></a>map遍历键值对Entry的方法</h3><p><img src="/img/190.png" alt=""><br><img src="/img/191.png" alt=""></p><h2 id="LinkedHashMap集合"><a href="#LinkedHashMap集合" class="headerlink" title="LinkedHashMap集合"></a>LinkedHashMap集合</h2><p><img src="/img/192.png" alt=""></p><h2 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h2><p><img src="/img/193.png" alt=""></p><h3 id="JDK9特性—集合优化of"><a href="#JDK9特性—集合优化of" class="headerlink" title="JDK9特性—集合优化of"></a>JDK9特性—集合优化of</h3><p><img src="/img/194.png" alt=""></p><h2 id="Debug"><a href="#Debug" class="headerlink" title="Debug"></a>Debug</h2><p><img src="/img/195.png" alt=""><br><img src="/img/196.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;集合&quot;&gt;&lt;a href=&quot;#集合&quot; class=&quot;headerlink&quot; title=&quot;集合&quot;&gt;&lt;/a&gt;集合&lt;/h1&gt;&lt;h2 id=&quot;collection&quot;&gt;&lt;a href=&quot;#collection&quot; class=&quot;headerlink&quot; title=&quot;colle</summary>
      
    
    
    
    <category term="java" scheme="https://dingzhenchen.github.io/categories/java/"/>
    
    <category term="JAVASE" scheme="https://dingzhenchen.github.io/categories/java/JAVASE/"/>
    
    <category term="基础知识" scheme="https://dingzhenchen.github.io/categories/java/JAVASE/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="javase" scheme="https://dingzhenchen.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>面向对象</title>
    <link href="https://dingzhenchen.github.io/2023/01/05/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    <id>https://dingzhenchen.github.io/2023/01/05/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
    <published>2023-01-05T09:00:00.000Z</published>
    <updated>2023-01-05T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>面向过程<br>当需要实现一个功能的时候每个具体步骤都要亲力亲为，详细处理每一个细节</li><li>面向对象<br>当需要实现功能时候，不关心具体的实现步骤，而是找一个拥有该功能的人，帮我做事。<h3 id="什么是类"><a href="#什么是类" class="headerlink" title="什么是类"></a>什么是类</h3></li><li>类：是一组属性和行为的集合，可以看做一类事物的模板，使用事物的属性特征和行为特征来描述该事物<br>现实中描述一类事物</li><li>属性：该事物的状态信息</li><li>行为：就是该事物能够做什么<h3 id="什么是对象"><a href="#什么是对象" class="headerlink" title="什么是对象"></a>什么是对象</h3>是一类事物的具体实现，对象是类的一个实例，必然具备该事物的属性和行为</li><li>类是对一类事物的描述，是抽象的</li><li>对象是一类事物的实例，是具体的</li><li>类是对象的模板，对象是类的实体<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4>成员变量是直接定义在类当中，在方法外面<br>成员变量不要有static关键字<br>java类中<br>成员变量(属性)<br>成员方法(行为)<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span>&#123;</span><br><span class="line"> <span class="comment">//成员变量</span></span><br><span class="line"> String name;</span><br><span class="line"> <span class="type">int</span> age;</span><br><span class="line">  <span class="comment">//成员方法     </span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;吃饭饭&quot;</span>) ;         </span><br><span class="line">  &#125;      </span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;睡觉觉&quot;</span>) ;         </span><br><span class="line">  &#125;     </span><br><span class="line">   <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">study</span><span class="params">()</span>&#123;</span><br><span class="line">  System.out.println(<span class="string">&quot;学习&quot;</span>) ;         </span><br><span class="line">  &#125;          </span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><h2 id="成员变量和局部变量"><a href="#成员变量和局部变量" class="headerlink" title="成员变量和局部变量"></a>成员变量和局部变量</h2>1定义的位置不一样【重点】局部变量:在方法内部<br>成员变量:在方法外部，直接写在类当中<br>2作用范围不一样【重点】<br>局部变量:只有在方法中才能使用，出了方法就不能再用<br>成员变量:整个类都可以通用<br>3默认值不一样【重点】<br>局部变量:没有默认值，如果要使用必须手动赋值<br>成员变量:如果没有变量会自动赋值，会有默认值，规则和数组一样<br>4生命周期不一样<br>局部变量:随着方法进栈而诞生，随着方法出栈而消失<br>成员变量:随着对象创建而诞生，随着对象被垃圾回收而消失<br>5内存位置不一样<br>局部变量:位于栈内存<br>成员变量:位于堆内存   <h2 id="对象内存图"><a href="#对象内存图" class="headerlink" title="对象内存图"></a>对象内存图</h2><img src="/img/129.png" alt=""><br><img src="/img/130.png" alt=""><br><img src="/img/131.png" alt=""><br>当对象作为参数传递到，传递到方法当中时，实际传递的就是对象地址值<br><img src="/img/132.png" alt=""><br>当对象类型作为返回值时，返回值就是对象的地址<h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2>构造方法是专门创建对象的方法，当我们调用关键字new来创造方法时，其实就是在调用构造方法<br>格式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> 类名称(参数类型 参数名称)&#123;</span><br><span class="line">    方法体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4>1构造方法的名称必须和所在的类名称完全一样，连大小写也一样<br>2构造方法不要写返回值，连void都不要写<br>3构造方法不能return一个具体的返回值<br>4如果没有编写任何构造方法，那么编译器会默认赠送一个构造方法，没有参数，方法体什么事也不做<br>5一旦编写了至少一个构造方法，那么编辑器将不再赠送<br>6构造方法也可以进行重载<br>方法名称相同，参数列表不同<br>如果需要改变成员变量中的数据内容还需要用get，set方法<h2 id="标准的类"><a href="#标准的类" class="headerlink" title="标准的类"></a>标准的类</h2>标准的类只有下面组成部分<br>1所有的变量都要使用private关键字修饰<br>2为每一个成员变量编写一对geter/seter方法<br>3编写一个无参数的构造方法<br>4编写一个全参数的构造方法<br>这个标准类也叫Java   Bean<h2 id="匿名对象"><a href="#匿名对象" class="headerlink" title="匿名对象"></a>匿名对象</h2>匿名对象就是只有右边的类，没有左边的名字和赋值运算符<br>确定变量只需要使用唯一的一次<h1 id="API"><a href="#API" class="headerlink" title="API"></a>API</h1><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2>功能：实现键盘输入数据，到程序当中<br>引用类型一般的使用步骤<br>1导包 import 包路径，类名称<br>如果需要使用的目标类，和当前类位于同一个包下<br>只有java.lang包下的内容不需要导包，其他的包都需要import语句<br>2创建<br>3使用  对象类名.成员方法名<h2 id="random"><a href="#random" class="headerlink" title="random"></a>random</h2>random类<br>用于生成随机数字<br>1导包<br>import utill.random();<br>2创建<br>random r=new random（）；<br>3使用<br>获取一个随机的int数字（范围是int，有正负两种）<br>获取一个随机的int数字，参数代表范围，左闭右开区间<br>数组有一个缺点一旦创建程序运行期间长度不可以发生变化<h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2>数组的长度不可以发生改变<br>但是ArrayList集合的长度可以随意变化的<br>对于arraylist来说，有一个<E>代表泛型<br>泛型：也就是装在集合里所有的元素，全都是统一的什么类型<br>注意泛型只能是引用类型不能是基本类型<br>从jdk1.7+开始右侧的尖括可以不写内容，但是&lt;&gt;本身还是要写<h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4>对于ArrayList来说打印的不是地址值，而是内容<br>如果内容为空，得到的是空的中括号<br>向集合了添加一些数据用add方法<h3 id="ArrayList的常用方法"><a href="#ArrayList的常用方法" class="headerlink" title="ArrayList的常用方法"></a>ArrayList的常用方法</h3>public  boolean add<E e>向集合内添加元素，参数的类型和泛型一直，返回值代表成功<br>备注：对于ArrayListadd添加动作一定成功，所以可用可不用<br>但是对以后学习来说，add添加不一定成功<br>public <E> get (int index)：从集合里获取元素，参数就是索引编号，返回值就是对应未知的元素<br>public <E> remove (int index)：从集合里删除元素，参数就是索引编号，返回值就是被删掉的的元素<br>public int size：获取集合的长度，返回值就是集合中包含的元素个数<br>如果希望向ArrayList当中存储基本类型数据，必须使用基本类型对应的的”包装类”<br>基本类型   包装类（引用类型，包装类都位于java.lang包下）<br>byte              Byte<br>int                 Integer<br>long              Long<br>float              Float<br>double          Double<br>char              Character<br>boolean         Boolean<br>从jdk1.5开始 java支持自动装箱，自动拆箱<br>自动装箱 :基本类型——&gt;引用类型<br>自动拆箱：引用类型——&gt;基本类型<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1>java.lang.String类代表字符串<br>api中字符串的字面量都可以作为此类的实例实现<br>也就是说程序当中所有的字符串，都是String的对象<h2 id="字符串的特点"><a href="#字符串的特点" class="headerlink" title="字符串的特点"></a>字符串的特点</h2>字符串的内容是不可变的<br>正是因为字符串不可变，所以 字符串可以共享变量<br>字符串效果上相当于char字符数组，但是底层原理是byte类型的字节数组       <h2 id="创建字符串的常见3-1方法"><a href="#创建字符串的常见3-1方法" class="headerlink" title="创建字符串的常见3+1方法"></a>创建字符串的常见3+1方法</h2>三种构造方法<br>public string():创建一个空白的字符串，不含有任何内容<br>public String(char[] array):根据字符数组的内容，来创建对应得字符串<br>public String(byte[] array):根据字节数组的内容，来创建对应得字符串<br>一种直接创建<br>程序当中直接加双引号对象，就在字符串常量池中<br>对于基本类型来说==是数值的比较<br>对于引用类型来说==是地址值的比较<h2 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h2>程序当中加上双引号<br><img src="/img/133.png" alt=""><h2 id="字符串的比较方法"><a href="#字符串的比较方法" class="headerlink" title="字符串的比较方法"></a>字符串的比较方法</h2>==是地址值的比较，如果确实需要字符串的内容比较，可以使用两个方法<br>public boolean equals(Object obj) 参数可以是任何对象，只有参数是一个字符串并且内容相同的才会给true，否则返回false<br>注意事项：任何对象都可以用object接受<br>equal具有对称性，也就是a.equals(b)和b.equals(a）一样<br>如果双方是一个变量一个常量，推荐把变量字符串写在前面<br>equals严格区分大小写<br>equaIagnoreCase忽略大小写<br>只有英文区分大小写<h2 id="字符串获取的相关方法"><a href="#字符串获取的相关方法" class="headerlink" title="字符串获取的相关方法"></a>字符串获取的相关方法</h2>String当中获取相关的常用方法<br>public int length（）获取字符串当中含有的字符串个数，拿到字符串长度<br>public String contact（String str）：将当前字符串和参数字符串拼接成为返回值新的字符串<br>public char CharAt(int  index)返回指定位置索引的单个字符串<br>public int indexOf(String str)查找参数字符串在本字符串当中的首次出现的索引位置，如果没有返回-1<h2 id="字符串的截取方法"><a href="#字符串的截取方法" class="headerlink" title="字符串的截取方法"></a>字符串的截取方法</h2>public Str stbstring(int index)截取从参数位置一直到字符串末尾，返回新字符串<br>public Str stbstring(int begin，int end)截取从begin开始，一直到end结束<br>备注[begin,end)包含左边不包含右边<br>字符串不可改变<h2 id="字符串转换的方法"><a href="#字符串转换的方法" class="headerlink" title="字符串转换的方法"></a>字符串转换的方法</h2>public char[] toCharArray():将当前字符串拆分成字符数组作为返回值<br>public byte[] getByte:获得当前字符串底层的字节数组<br>public String replace(CharSequence  oldString,CharSequence  newString)将所有出现的老字符串替换成新的字符串，返回替换之后的结果新字符串<br>字符串的分割方法<br>public String[] split(String regex):分割字符串的方法：按照参数的规则将字符串切分为若干部分<br>split方法的参数其实是一个正则表达式<br>注意如果要是英语”.”进行切分必须写”//.”<h1 id="static关键字"><a href="#static关键字" class="headerlink" title="static关键字"></a>static关键字</h1>一旦使用了static关键字，那么这个数据不在属于对象自己，而是属于类的，所以凡是本类的对象都共享同一份数据<br>无论是成员变量还是成员方法，有了static，都推荐使用类名称进行调用<br>成员 变量：类名.静态变量<br>成员 方法：类名.静态方法<br>静态只能访问静态。不能访问非静态<br>注意事项：<br>内存当中先有的静态内容后有的非静态内容<br>静态方法中不能有this<br>this代表当前对象，通过谁调用的方法谁就是对象<br>对于静态方法可以使用对象名进行调用，也可以直接通过类名来调用(推荐)<br>对于本来当中的静态方法可以省略类名称<h2 id="静态代码块"><a href="#静态代码块" class="headerlink" title="静态代码块"></a>静态代码块</h2>静态代码块的格式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class 类名称&#123;</span><br><span class="line"><span class="keyword">static</span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>特点<br>第一次用到本类时，静态代码块执行唯一的一次<br>静态内容总是优于非静态，所以静态代码块比构造方法先执行</li><li>静态代码块的典型用途<br>用来一次性对静态成员变量进行赋值<br><img src="/img/134.png" alt=""><h3 id="Array类"><a href="#Array类" class="headerlink" title="Array类"></a>Array类</h3>public static String toString(数组) 将参数数组变成字符串(按照默认的格式[元素1，元素2，元素3…)<br>public static void sort(数组）,按照默认升序对数组元素进行排序<br>备注：1如果是数值，sort默认升序从小到大排列<br>如果是字符串，sort默认按照字母升序<br>如果是自定义类型，那么这个自定义的类要有comparable接口和comparator<h3 id="Math类"><a href="#Math类" class="headerlink" title="Math类"></a>Math类</h3>public static double abs(double num)绝对值<br>public static double ceil(double num)向上取整<br>public static double floor(double num)向下取整<br>public static long round(double num)四舍五入<br>Math.PI代表近似圆周率的常量<h1 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h1>封装在java中的体现<br>1方法就是一种封装<br>2关键字private也是一种封装<br>封装就是将一些细节隐藏起来，对外界不可见<br>定义private的年龄时，无法阻止不合理的数值被设置进来<br>解决方案用private关键字将需要保护的变量进行修饰<br>一旦使用private进行修饰那么本类中依然可以随意访问<br>但是超出本类之外的就不能在直接访问了<br>间接访问private的变量，就是定义一对getter和setter方法<br>对于基本类型中的boolean值，一定要写成Isxxx的形式，规则不变。<br>当方法的局部变量和成员变量重名时，根据就近原则优先使用”局部变量”<br>如果需要访问本类中的成员变量，需要使用格式<br>this.成员变量<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><img src="/img/135.png" alt=""><br>在继承关系中，”子类就是一个父类”，也就是说子类被当成父类看待<br>例如父类是员工，子类是讲师，那么讲师是一个员工，关系：is a<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">- 父类的格式(一个普通类的定义)</span><br><span class="line"><span class="keyword">public</span> class 父类名称&#123;</span><br><span class="line"><span class="comment">//..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>定义子类的格式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> class 子类名称 extend 父类名称&#123;</span><br><span class="line"><span class="comment">//..</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>提高代码复用性<br>直接通过子类对象访问成员变量 ：等号左边是谁就优先用谁，没有则向上找<br>间接通过成员方法访问成员变量：该方法属于谁就优先用谁<br>局部变量：   直接写成员变量名<br>本类的成员变量用this.成员变量名<br>父类的成员变量用super.成员变量名<br>访问成员方法的规则<br>创建的对象是谁就优先用谁 如果没有则向上找<br>注意事项：无论是成员变量还是成员方法，如果没有都是优先向上找父类，绝对不会向下找子类<h2 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h2></li><li>（override）<br>方法的名称一样，参数列表也一样</li><li>（overload）<br>方法的名称一样，参数列表不一样<br>方法覆盖重写的特点：创建的是子类对象优先用子类方法<h4 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h4>1必须保证父子类之间名称相同，参数列表也相同。<br>@Override，写在方法前面用来检测是不是有效的正确覆盖重写<br>这个注解就算不写，只要满足要求，也是正确的方法覆盖重写<br>2子类方法的返回值范围必须要小于等于父类方法的返回值范围<br>小拓展：java.lang.Object类是所有类的公共最高父类(祖宗类)，java.lang.String类是Object的子类<br>3子类方法的权限必须大于等于父类方法的权限修饰符<br>小拓展：public &gt;protected &gt;(default)&gt;private<br>备注：(default)并不是关键字default，而是什么都不写，留空<br>设计原则：对于已经投入生产的类，尽量不要修改，推荐定义一个新的类，来重复利用其中的共性内容，并添加改动新内容<br>继承关系中:父子类构造方法的访问特点<br>子类构造器当中默认有一个隐含“super()”的构造方法调用，所以一定先调用父类构造，后执行自类构造、<br>2可以使用super关键字子类构造调用父类重载构造<br>3super的父类构造调用，必须是子类构造方法的第一个语句，不能子类调用多次super构造<br>总结子类必须调用父类的构造方法，不写则赠送super，写了则用指定的super调用，super只能有一个还必须是第一个 。<h2 id="super关键字的三种用法"><a href="#super关键字的三种用法" class="headerlink" title="super关键字的三种用法"></a>super关键字的三种用法</h2>1在子类的成员方法中，访问父类的成员变量。<br>2在子类的成员方法中，访问父类的成员方法。<br>3在子类的构造方法中，访问父类的构造方法。<h2 id="this关键字的三种用法"><a href="#this关键字的三种用法" class="headerlink" title="this关键字的三种用法"></a>this关键字的三种用法</h2>1在本类的成员方法中，访问本类的成员变量。<br>2在本类的成员方法中，访问本类的另一个成员方法。<br>3在本类的构造方法中，访问本类的另一个构造方法。（this方法也必须是本类的第一个语句，也是唯一一个。<br>super，this两种构造调用，不能同时使用<h2 id="super和this的图解"><a href="#super和this的图解" class="headerlink" title="super和this的图解"></a>super和this的图解</h2><img src="/img/136.png" alt=""><br>JAVA语言的三个特点<br>java语言是单继承的，一个类的直接父类只能有一个<br>java语言可以多级继承<br>一个类的直接父类是唯一的，但是一个父类可以有多个子类<br><img src="/img/137.png" alt=""><h1 id="抽象的概念"><a href="#抽象的概念" class="headerlink" title="抽象的概念"></a>抽象的概念</h1><img src="/img/138.png" alt=""><h2 id="抽象方法和抽象类定义格式"><a href="#抽象方法和抽象类定义格式" class="headerlink" title="抽象方法和抽象类定义格式"></a>抽象方法和抽象类定义格式</h2>直接加上abstract关键字，然后去掉大括号，直接分号结束<br>抽象类：抽象方法所在的类，必须是抽象类，在class前面加上abstrract即可<h2 id="抽象方法和抽象类的使用"><a href="#抽象方法和抽象类的使用" class="headerlink" title="抽象方法和抽象类的使用"></a>抽象方法和抽象类的使用</h2>不能直接new一个抽象类对象<br>必须用一个子类来继承抽象父类<br>子类必须覆盖重写抽象父类里的所有抽象方法<br>覆盖重写(实现)：子类去掉抽象方法里的abstract关键字，然后补上方法体大括号<br>创建子类对象进行使用<h4 id="抽象方法和抽象类注意事项"><a href="#抽象方法和抽象类注意事项" class="headerlink" title="抽象方法和抽象类注意事项"></a>抽象方法和抽象类注意事项</h4>1抽象类不能创建对象，如果创建，编译无法通过而报错，只能创造其非抽象子类的对象<br>2在抽象类中可以有构造方法，是子类创建对象时，初始化父类成员使用的<br>3在抽象类中不一定有抽象方法，但是有抽象方法的类一定是抽象类<br>4抽象类的子类，必须重写抽象父类中的所有抽象方法，否则编译无法通过，除非该子类也是抽象类<h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1>接口就是公共规范的标准，只要符合规范标准就可以大家通用<br>接口就是多个类的公共规范<br>接口是一种引用的数据类型<br>接口是一种引用数据类型，最重要的就是其中的抽象方法<h2 id="如何定义一个接口的格式"><a href="#如何定义一个接口的格式" class="headerlink" title="如何定义一个接口的格式"></a>如何定义一个接口的格式</h2>public interface 接口名称{<br>//接口内容<br>}<br>换成关键字interface之后，编译生成的字节码文件依然是：.java-&gt;.class<br>如果是java7，那么包含的内容有<br>1常量<br>接口当中也可以定义成员变量 必须使用public static final三个关键字进行修饰<br>格式<br>public static final 数据类型  常量名称=数据值<h4 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h4>1接口当中的常量可以省略public static final<br>2接口当中的常量也可以进行赋值，不能不赋值<br>3接口当中的常量的名称，使用完全大写的字母，用下划线隔开<br>2抽象方法<br>在任何版本的java中接口都能定义抽象方法<br>格式：<br>public  abstract  返回值类型 方法名称(参数列表)<h5 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h5>接口当中的抽象方法，修饰符必须是两个固定的关键字public abstract<br>2这两个关键字可以选择性的省略<br>方法的三要素，可以随意定义<br>接口的使用步骤：1接口不能直接使用，必须要有一个实现类来实现接口格式<br>public class 实现类名接口名称<br>接口的实现类必须覆盖重写(实现)接口里的所有抽象方法<br>去掉abstract关键字，加上方法体大括号<br>备注如果实现类并煤油覆盖重写(实现)接口里的所有抽象方法你，那么这个实现类自己就是抽象类<br>3创建实现类的对象进行使用<br>如果是java8，额外包含有：<br>3静态方法</li><li>格式<br>public static 返回值类型 方法名称(参数列表)<br>{<br>//方法体<br>}<br>不能通过接口实现类对象来调用接口当中的静态方法<br>正确用法:通过接口名称直接调用其中的静态方法<br>4默认方法</li><li>格式<br>public default 返回值类型 方法名称(参数列表)<br>{<br>//方法体<br>}<br>接口中的默认方法，可以解决接口升级的问题<br>接口的默认方法也可以通过实现类对象进行直接调用<br>接口的默认方法也可以通过实现类进行覆盖重写，调用抽象方法，实际运行的是右侧实现类<br>调用默认方法如果实现类没有，会向上找接口<br>如果是java9，还额外包含：<br>5私有方法<br>普通私有方法解决多个默认方法之间代码重复的问题</li><li>格式<br>public private 返回值类型 方法名称(参数列表)<br>{<br>//方法体<br>}<br>静态私有方法解决多个静态方法之间代码重复的问题</li><li>格式<br>private  static   返回值类型 方法名称(参数列表)<br>{<br>//方法体<br>}<br>继承父类并且实现多个接口<br>使用接口的时候要注意<br>1接口是没有静态代码块和构造方法的<br>2一个类的直接父类是唯一的，但是一个类可以实现多个接口<br>会覆盖重写多个抽象方法<br>3如果实现类实现的多个接口中，存在重复的抽象方法，需要覆盖重写一次即可<br>4如果实现类没有覆盖重写所有接口当中的所有抽象方法，那么实现类必须是一个抽象类<br>5如果实现类实现的多个接口中存在重复的默认方法，那么实现类一定要对冲突的默认方法进行覆盖重写<br>6一个类如果直接父类当中的方法，和接口当中的默认方法，产生了冲突<br>接口当中的多继承<br>1接口与接口之间是多继承的<br>类与类之间是单继承的，直接父类只有一个。<br>类和接口之间是多实现的，一个类实现多个接口<br>多个接口之间的抽象方法如果重复，没关系<br>多个接口之间的默认方法如果重复，那么子接口必须进行要对默认方法覆盖重写，而且带着default关键字<h1 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h1>代码当中的体现多态性，其实就是一句话，父类引用指向子类对象<br>父类名称 对象名=new 子类名称<br>或者<br>接口名称 对象名=new 实现类名称<br>直接通过对象名称来访问成员变量：看等号左边是谁就优先用谁，不够则向上找<br>间接通过成员方法访问成员变量：看该方法属于谁，优先用谁，不够则向上找<br>子类没有覆盖重写就是父<br>子类覆盖重写就是子<br>在多态的代码中，成员方法访问的规则是<br>看new的是谁就优先用谁，没有则想上找<br>编译看左边，运行看右边；<h2 id="多态的好处"><a href="#多态的好处" class="headerlink" title="多态的好处"></a>多态的好处</h2><img src="/img/139.png" alt=""><h2 id="对象的向上转型"><a href="#对象的向上转型" class="headerlink" title="对象的向上转型"></a>对象的向上转型</h2>对象的向上转型，就是父类引用指向子类<br><img src="/img/139.png" alt=""><br>对象的向下转型<br>格式<br>子类名称 对象名=子类名称 父类对象<br>如果对象向上转型父类，那么就无法调用子类原本的特有的内容<br>解决方案:用对象向下转型还原<br><img src="/img/140.png" alt=""><br><img src="/img/141.png" alt=""><br>instanceof<br>格式：对象  instanceof 类名称<br>这会得到一个boolean判断前面的对象能不能当后面的实例<h1 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h1>final关键字代表最终的不可改变的<br>常见的四种用法<br>1用来修饰一个类<br>格式<br>public final class 类名称{<br>}<br>这个类不能含有任何的子类<br>如果一个类，那么其中的成员方法都无法覆盖重写<br>2用来修饰一个方法<br>当final用来修饰一个方法的时候，这个方法就是最终方法，也就是不能被覆盖重写<br>修饰符 final 返回值类型 方法名称(参数列表){<br>//方法体<br>}<br>3用来修饰一个局部变量<br>一旦用final用来修饰局部变量，那么这个变量就不能进行更改<br>对于基本类型来说，不可变说的是变量当中的数据不可变<br>对于引用类型来说，不可变说的是变量当中的地址值不可变<br>4用来修饰一个成员变量<br>1由于成员变量具有默认值，所以用了final之后必须手动赋值，不会再给默认值<br>对于final的成员变量，要么使用直接赋值，要么通过构造方法赋值<br>必须保证类当中所有重载的构造方法，都最终会对final对象进行赋值<br>备注：对于类和方法来说，abstract和final不能同时使用因为有矛盾<h1 id="四种修饰符"><a href="#四种修饰符" class="headerlink" title="四种修饰符"></a>四种修饰符</h1><img src="/img/142.png" alt=""><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1>如果一个事物内部包含另一个事物，那么这就是一个类的内部包含另一个类<br>分类<br>1成员内部类<br>2局部内部类(包含匿名内部类)<h2 id="成员内部类"><a href="#成员内部类" class="headerlink" title="成员内部类"></a>成员内部类</h2>定义格式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 class 外部类名称&#123;</span><br><span class="line">   修饰符 class 外部类名称&#123;</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>内用外，随意访问，外用内需要内部类对象</li><li>如何使用成员内部类<br>两种方式<br>1间接方式：在外部类的方法中，使用内部类，main只是调用外部类的方法<br>2直接方式:<br>类名称 变量名=new 类名称();<br>[外部类名称.内部类名称 对象名=new 外部类名称.new内部类名称();]<br>如果出现了重名现象，那么格式是外部类名称.this.外部类成员变量名<h2 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h2>如果一个类定义在一个方法的内部，那么这就是一个局部内部类<br>局部：只有当前所属的方法才能使用它，出了这个方法就不能再用<br>定义格式：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 class 外部类名称&#123;</span><br><span class="line">   修饰符 返回值类型 外部类方法名称(参数列表)&#123;</span><br><span class="line">class 局部内部类名称&#123;</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>定义一个类的时候<br>权限修饰符规则：<br>{<br>外部类:public/default<br>成员内部类：public/protected/(default)/private<br>局部内部类：什么都不写<br>局部内部类：如果希望访问方法所在的局部变量，那么final关键字可以省略<br>备注：从java8+开始，只要局部变量事实不变，那么final关键字可以省略<br>原因：new出来的对象在堆内存当中<br>局部变量跟着方法走的，在栈内存当中<br>方法运行结束之后，立刻出栈，局部变量就会立刻消失<br>但是new出来的对象在堆中持续存在，直到垃圾回收消失<h2 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h2>如果接口的实现类(或者父类的子类)只需要使用唯一的一次<br>那么这种情况就可以省略到该类的定义，而改为使用匿名内部类<br>匿名内部类的定义格式<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">接口名称 对象名=<span class="keyword">new</span> 接口名称&#123;</span><br><span class="line">    <span class="comment">//覆盖重写的抽象方法</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>对格式：new 接口名称(){…}进行解析<br>1new 代表创建对象的动作<br>2接口名称代表匿名内部类需要实现那个接口<br>3{…}是匿名了内部类的内容<h4 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h4>如果希望多次创建对象，而且内容一样的话，那么就必须使用单独定义的实现<br>匿名对象在调用方法时只能调用一次<br>如果希望同一个对象，调用方法，那么必须要给对象起个名字<br>匿名内部类省略了实现类和子类名称，但是匿名对象省略了对象名称注意事项<h1 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h1>java.lang.Object类<br>类object是类层次结构的根类，每个类都用object作为超类(父类)<br>所有的对象包括数组都实现这个类的方法<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2>person默认继承object类，所以可以使用object类中的toString方法<br>String toString()返回对象的字符串表示<br>直接打印对象的名字就是调用toString方法<br>看一个是否重写了toString方法，直接打印这个类对应对象的名字即可<br>如果没有重写toString方法，那么打印的就是对象的地址值(默认)<br>如果重写toString方法，那么按照重写的方式打印<h2 id="equal"><a href="#equal" class="headerlink" title="equal"></a>equal</h2>person默认继承了object类，所以可以使用object类的equals方法<br>boolean equal(Object)指示某个对象是否与此对象相等<br>Object类的equals方法源码<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span>  <span class="title function_">equals</span><span class="params">(Object obj)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span>(<span class="built_in">this</span>==obj)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>基本类型比较的是值<br>引用类型比较的是两个对象的地址值、<br>this是谁那个对象调用了，方法中的this就是那个对象，obj是传递过来的参数<br>object类的equals默认方法，比较的是两个对象的默认地址值，没有意义<br>所以我能需要重写equals方法，比较两个对象的属性值(name,age)<br>隐含着一个多态<br>多态弊端：无法使用子类特有的内容(属性,方法）<br>解决向下转型,强转将object转化为person<br><img src="/img/143.png" alt=""><br><img src="/img/144.png" alt=""><h2 id="objects类中的equals方法"><a href="#objects类中的equals方法" class="headerlink" title="objects类中的equals方法"></a>objects类中的equals方法</h2>jdk7添加的一个工具类，它提供一些方法来操作对象，它是由一些静态的类组成，这些类是空指针安全的容忍空指针的<br><img src="/img/145.png" alt=""><br><img src="/img/146.png" alt=""><h1 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h1>java.utill.Date表示日期和时间的类<br>Date表示特定的时间精确到毫秒<br>毫秒：千分之一秒  1000ms=1秒<br>毫秒值的作用：可以对日期时间进行计算<br>把日期转换为毫秒：就是看当前日期到时间原点之间一共经历了多少毫秒(英国格林威治)<br>中国属于东八区，时间再增加8个小时<br>Date的构造方法和成员方法<br>Date的空参构造<br>Date获取当前系统的日期和时间<br>Date带参数的构造方法<br>传递毫秒值，将毫秒值转换为date日期<br>Date的成员方法<br>long getTime返回自时间原点的毫秒值(相当于Sytsem.currentTimeMillis)<h2 id="DateFormat"><a href="#DateFormat" class="headerlink" title="DateFormat"></a>DateFormat</h2>java.text.DateFormat是日期/时间格式化子类的抽象类<br>作用：格式化(也就是日期到文本)解析(文本到日期)<br>成员方法:String format(Date date)按照指定的模式，把Date日期，将日期转化为符合模式的字符串<br>Date parse(String source):把符合模式的字符串，解析为Date日期<br>DateFormat是一个抽象类，无法直接创建对象使用，可以使用DateFormat的子类<br>SimpleDateFormat(String pattern)用户给定的模式和默认语言环境的日期格式符号构造<br>参数String pattern<br>模式:区分大小写<br>写对应的模式，会把模式替换为对应的日期和时间<br>注意模式中的字母不可以改变<h1 id="Date类-1"><a href="#Date类-1" class="headerlink" title="Date类"></a>Date类</h1>java.utill.Date表示日期和时间的类<br>Date表示特定的时间精确到毫秒<br>毫秒：千分之一秒  1000ms=1秒<br>毫秒值的作用：可以对日期时间进行计算<br>把日期转换为毫秒：就是看当前日期到时间原点之间一共经历了多少毫秒(英国格林威治)<br>中国属于东八区，时间再增加8个小时<br>Date的构造方法和成员方法<br>Date的空参构造<br>Date获取当前系统的日期和时间<br>Date带参数的构造方法<br>传递毫秒值，将毫秒值转换为date日期<br>Date的成员方法<br>long getTime返回自时间原点的毫秒值(相当于Sytsem.currentTimeMillis)<h2 id="DateFormat-1"><a href="#DateFormat-1" class="headerlink" title="DateFormat"></a>DateFormat</h2>java.text.DateFormat是日期/时间格式化子类的抽象类<br>作用：格式化(也就是日期到文本)解析(文本到日期)<br>成员方法:String format(Date date)按照指定的模式，把Date日期，将日期转化为符合模式的字符串<br>Date parse(String source):把符合模式的字符串，解析为Date日期<br>DateFormat是一个抽象类，无法直接创建对象使用，可以使用DateFormat的子类<br>SimpleDateFormat(String pattern)用户给定的模式和默认语言环境的日期格式符号构造<br>参数String pattern<br>模式:区分大小写<br><img src="/img/147.png" alt=""><br>写对应的模式，会把模式替换为对应的日期和时间<br>注意模式中的字母不可以改变，但是连接符号可以改变<br>使用步骤<br>创建SimpleDateFormat对象，构造方法中传递指定的模式<br>调用SimpleDateFormat对象里面的format方法，按照构造方法的指定格式，把Date日期转化为字符串<br>创建SimpleDateFormat对象，构造方法中传递指定的模式<br>调用SimpleDateFormat对象里面的parse方法，按照构造方法的指定格式，字符串解析为Date日期<br>parse声明了一个异常叫ParseException，如果字符串和构造方法中的模式不一样，那么程序就会抛出此异常<h1 id="Calendar"><a href="#Calendar" class="headerlink" title="Calendar"></a>Calendar</h1>java.utill.calendar类：日历类<br>Calendar是一个抽象类，里面提供了很多操作日历字段的方法(YEAR MONTH DAY OF MONTH HOUR)<br>Calendar无法直接创建对象使用，里面有一个静态方法叫getInstance，该方法返回了calendar的子类对象<br>static  Calendar getInstance使用默认时区和语言环境获得一个日历<h2 id="calendar"><a href="#calendar" class="headerlink" title="calendar"></a>calendar</h2>public int get(int field)返回给定的日历字段的值<br>public void set(int field，int value)：将日历的给定字段设置为给定值<br>public abstract void add(int field,int amount)给给定的日历字段添加或减去指定的时间量<br>public Date getTime:返回一个表示此calendar时间值的date对象<br>成员方法的参数：int field：日历类的字段，可以使用calendar的静态成员变量获取<br><img src="/img/148.png" alt=""><br>总结<br><img src="/img/149.png" alt=""><br><img src="/img/150.png" alt=""><h2 id="System"><a href="#System" class="headerlink" title="System"></a>System</h2>java.lang.System提供了大量静态方法，可以获取与系统相关的信息和系统级操作<br>public static long currentTimeMillis：返回以毫秒为单位的当前时间public static void arraycopy(Objcet src,int srcPos，Object dest，int destPos，int length)<br>将数组中的指定数据拷贝到另一个数组中<br>src原数组<br>srcPos 原数组的起始位置<br>Object dest   目标数组<br>int destPos  目标数组的起始位置<br>int length 要复制元素的数量<h2 id="StringButter"><a href="#StringButter" class="headerlink" title="StringButter"></a>StringButter</h2><img src="/img/151.png" alt=""><br>java.lang.StringButter类：字符缓冲区，可以提高字符串的效率</li><li>构造方法##<br>public StringButter():构造一个空的StringButter容器<br>public StringButter(String str):构造一个StringButter容器，将字符串添加进去</li><li>常用方法<br>public  StringButtter  addend(…):添加任意类型的字符串变量，并返回当前对象自身<br>public  String toString():将StringButter对象转化为String对象<br>使用append无需接受返回值<br>链式编程：方法的返回值时一个对象，可以根据对象继续调用方法<br>String和StringButter可以相互转换<br>String——&gt;StringButter可以使用StringButter的构造方法<br>StringButter——&gt;String可以使用StringButter中的toString方法<br><img src="/img/152.png" alt=""><br>包装类<br><img src="/img/153.png" alt=""><br><img src="/img/154.png" alt=""><br><img src="/img/155.png" alt=""><h2 id="自动装箱和自动拆箱"><a href="#自动装箱和自动拆箱" class="headerlink" title="自动装箱和自动拆箱"></a>自动装箱和自动拆箱</h2>基本类型数据和包装类进行转换<br>直接把int类型的整数赋值给包装类<br>Integer in=1<br>Integer in=Integer(1);<br>in+2(相当于 in.intvalue()+3=3)<br>in=in+2( in=Integer(3);自动装箱)<br>ArrayList集合无法存储整数，所以存储Integer包装类<br><img src="/img/156.png" alt=""></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;面向对象&quot;&gt;&lt;a href=&quot;#面向对象&quot; class=&quot;headerlink&quot; title=&quot;面向对象&quot;&gt;&lt;/a&gt;面向对象&lt;/h1&gt;&lt;h2 id=&quot;基本知识&quot;&gt;&lt;a href=&quot;#基本知识&quot; class=&quot;headerlink&quot; title=&quot;基本知识&quot;&gt;&lt;/a</summary>
      
    
    
    
    <category term="java" scheme="https://dingzhenchen.github.io/categories/java/"/>
    
    <category term="JAVASE" scheme="https://dingzhenchen.github.io/categories/java/JAVASE/"/>
    
    <category term="基础知识" scheme="https://dingzhenchen.github.io/categories/java/JAVASE/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="javase" scheme="https://dingzhenchen.github.io/tags/javase/"/>
    
  </entry>
  
  <entry>
    <title>java基础</title>
    <link href="https://dingzhenchen.github.io/2023/01/04/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/"/>
    <id>https://dingzhenchen.github.io/2023/01/04/%E7%AC%AC%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0/</id>
    <published>2023-01-04T09:00:00.000Z</published>
    <updated>2023-01-04T09:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="字节"><a href="#字节" class="headerlink" title="字节"></a>字节</h1><p>位（bit）：一个数字0或者一个数字1，代表一位。<br>字节（Byte）:每逢8位是一个字节，也数据是存储的最小单位。<br>1byte=8bit；<br>1KB=1024Byte；<br>1MB=1024KB;<br>1GB=1024KB;<br>1TB=1024GB;</p><h1 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h1><p>打开命令行 win+R<br>切换盘符      磁盘位置  ：<br>进入文件夹   cd  空格  文件夹名字<br>进入多级文件夹  cd 文件夹1\文件夹2\文件夹3<br>返回上一级 cd..<br>返回根路径  cd\<br>查看当前内容 dir<br>退出 exit<br>清屏 cls</p><h1 id="jdk，jre，jvm"><a href="#jdk，jre，jvm" class="headerlink" title="jdk，jre，jvm"></a>jdk，jre，jvm</h1><p>jdk&gt;jre&gt;jvm<br>jvm：java虚拟机，运行java程序的假想计算机，是java程序的运行时环境，我们编写的代码都运行在jvm上<br>jre:java运行时环境，包含jvm和Java运行时需要的核心类库<br>jdk：java程序开发工具包，包含jre和开发人员使用的工具<br><img src="/img/111.png" alt=""></p><h1 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h1><p>有特殊含义的，被保留的，不能随意使用的字符</p><h2 id="关键字的特点"><a href="#关键字的特点" class="headerlink" title="关键字的特点"></a>关键字的特点</h2><p>1完全小写的字母<br>2在编辑器中有颜色提示</p><h1 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h1><p>指在程序中我们自己定义的内容，比如类的名字，方法的名字和变量的名字等等，都是标识符</p><h1 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h1><ul><li>标识符可以包含26个英文字母（区分大小写），（0-9）数字，$（美元符号)和下划线。</li><li>标识符不能以数字开头</li><li>标识符不能是关键字<h1 id="命名规范"><a href="#命名规范" class="headerlink" title="命名规范"></a>命名规范</h1></li><li>类名规范：首字母大写，后面每个单词首字母大写（大驼峰式)。HelloWorld</li><li>变量名规范：首字母小写，后面每一个单词首字母大写(小驼峰式）。helloWorld</li><li>方法名规范：同变量名<h1 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h1>在程序运行期间，固定不变的量<h2 id="常量的分类"><a href="#常量的分类" class="headerlink" title="常量的分类"></a>常量的分类</h2></li></ul><ol><li>字符串常量：凡是用双引号引起的部分。叫做字符串常量。例如：”abc”,”hello”,”123”。</li><li>整形常量：直接写上的数字，没有小数点。例如100,200。</li><li>浮点数常量，直接写上的数字，有小数点，例如2.5,0.0,-3.14</li><li>字符常量：凡是用单引号引起单个字符。叫做字符串常量。例如：’a’,’h’。<br>布尔值常量：只有量中的取值。true，flase。</li><li>空常量：null。<h1 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h1><img src="/img/112.png" alt=""><h1 id="基本数据类型-1"><a href="#基本数据类型-1" class="headerlink" title="基本数据类型"></a>基本数据类型</h1>整数型  从小到大 byte short int long<br>字符型 char<br>浮点型  float double<br>布尔型  boolean<h1 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h1>字符串，数组，类，接口，lambda<h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4>1.字符串不是数字类型而是引用类型<br>2.浮点数只是一个近似的值，并非一个精确的值<br>3.数据范围和字节数不一定相关，例如float范围比long更广阔，但是<br>float4个字节，long占8个字节。<br>4.浮点数默认数据类型是double，如果一定要使用float，需要加一个后缀F。整数默认数据类型是int，如果一定要使用long，需要加一个后缀L<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1>程序运行期间，内容可以改变的量<br>创建一个变量并使用的格式<br>数据类型 数据名称；<br>数据名称=数据值；<br>一步到位的格式：数据类型 数据名称=数据值<h4 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="注意事项"></a>注意事项</h4></li><li>如果创造多个变量，变量之间的名称不可以重复<br>2对于float和long类型来说，字母后缀F和L不要丢掉<br>3没有进行赋值的变量，不能直接使用；一定要赋值之后，在可以开始使用<br>4对于short和byte类型的变量，那么右侧的数据值不能超过左侧类型的范围。<br>5可以通过多个语句创造一个变量，但是一般不推荐这么写。<br>6超过作用域，变量就不能在使用了【作用域】：从定义的一行变量开始，一直到直接所属的大括号结束为止。<h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1>数据类型不一样时会发生数据类型转换<h2 id="自动数据转换（隐式）"><a href="#自动数据转换（隐式）" class="headerlink" title="自动数据转换（隐式）"></a>自动数据转换（隐式）</h2></li></ol><ul><li>特点：代码不需要进行特殊处理，自动完成。</li><li>规则：数据范围从小到大<h2 id="强制类型转换（显式）"><a href="#强制类型转换（显式）" class="headerlink" title="强制类型转换（显式）"></a>强制类型转换（显式）</h2></li><li>代码需要特殊格式处理，不能自动完成。</li><li>范围小的类型 范围小的变量名=范围小的类型（原本范围大的数据）<h4 id="注意事项-2"><a href="#注意事项-2" class="headerlink" title="注意事项"></a>注意事项</h4>1强制类型转换一般不推荐使用，有可能发生精度损失，数据溢出2<br>2byte，short，char这三种类型都能发生数据运算，例如加法“+”<br>3byte，short，char这三种类型发生数据运算的时候，都会被首先提升为int类型，在进行计算。<br>4boolean不能发生数据类型转换、<h1 id="ASCLL值"><a href="#ASCLL值" class="headerlink" title="ASCLL值"></a>ASCLL值</h1>48—&gt;0<br>65—&gt;A<br>97—&gt;a<br>ASCLL码表：美国信息交流标准代码<br>Unicode：万国码，也是数字字符的对照关系，开头0—127部分和ASCLL值完全一样，但是从128开始包含有更多字符<h1 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><h3 id="运算符-1"><a href="#运算符-1" class="headerlink" title="运算符"></a>运算符</h3></li></ul><ul><li>运算符：进行特殊操作的符号。例如”＋”</li><li>表达式：用运算符连起来的式子叫表达式。例如20+5<br>先计算表达式的值，在打印这个结果。</li><li>模（取余数）：%<h4 id="注意事项-3"><a href="#注意事项-3" class="headerlink" title="注意事项"></a>注意事项</h4>一旦运算当中有不同类型的数据，那结果将是范围较大的那种<br>四则运算当中加号的三种常见用法：<br>1对数值来说，那就是加法<br>2对于char类型来说，在计算前char会被提升为int，在进行计算<br>char和int之间的对应关系，之间的关系对照表：Unicode，ASCLL表<br>3对于字符串String（首字母大写不是关键字）来说，加号代表字符串连接操作<br>任何数据字符串进行链接时都会变成字符串<h2 id="自增自减运算符"><a href="#自增自减运算符" class="headerlink" title="自增自减运算符"></a>自增自减运算符</h2></li><li>自增运算符：++</li><li>自减运算符：—</li><li>基本含义：让一个变量涨数字1，或者让一个变量降数字1</li><li>使用格式：写在变量名称之前，写在变量名称之后，例如++num，num++</li><li>使用方式：<br>1单独使用：不和其他操作混合，自己独立成为一个步骤<br>2混合使用：和其他操作混合，例如与赋值混合，或者打印操作混合</li><li>使用区别<br>1单独使用的时候，前++和后++没有区别<br>2在混合时具有重大区别<br>如果要是前++，那么变量立刻马上加1，然后拿着结果使用。先加后用<br>如果是后++，那么先使用变量本来的数值在进行加一。先用后加<br>常量不可以使用++或—<h2 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h2></li><li>基本赋值运算符：就是一个等号’=’，代表将右侧的数据交给左侧的变量<br>1只有变量才能使用赋值运算符，常量不可以进行赋值<br>2复合赋值运算符其中隐含了一个强制类型转换<h2 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h2><img src="/img/113.png" alt=""><h4 id="注意事项-4"><a href="#注意事项-4" class="headerlink" title="注意事项"></a>注意事项</h4>比较运算符的结果一定是一个boolean值，成立就是true，不成立就是flase<br>如果多次判断，不能连着写<h2 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h2>与（并且）&amp;&amp; 全都是true才是true；否则就是flase<br>或（或者）||至少有一个是true，就是true；全都是false才是flase。<br>非!本来是true，变成flase；本来是flase，变成true<br>‘&amp;&amp;’和’||’具有短路效果：如果根据左边已经可以判断最终结果，那么右边代码将不再执行，从而节省一定的性能<h4 id="注意事项-5"><a href="#注意事项-5" class="headerlink" title="注意事项"></a>注意事项</h4>1逻辑运算符只能应用于boolean值<br>2&amp;&amp;和||需要左右各一个boolean值，但取反只有唯一的一个boolean值即可<br>3与或两种运算符，如果有多种条件可以连续写<h2 id="三元运算符"><a href="#三元运算符" class="headerlink" title="三元运算符"></a>三元运算符</h2>需要三个数据才能开始的运算符<br>格式:数据类型 变量名称=条件判断？表达式1:表达式2。<br>首先判断条件是否成立:<br>如果成立则为true,那么将表达式a的值赋值给左侧的变量<br>如果不成立为flase那么将表达式b的值赋值给左侧的变量<h4 id="注意事项-6"><a href="#注意事项-6" class="headerlink" title="注意事项"></a>注意事项</h4></li><li>必须保证表达式a和b都符合左侧的要求</li><li>三元运算符的结果必须被使用<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h1></li><li>定义:将一个功能抽取出来，把代码单独定义在大括号内，形成一个单独的功能，就可以去调用，这既实现代码的复用性，也解决代码冗余的现象</li><li>定义方法的格式<br>修饰符 返回值类型 方法名 （参数类型，参数名称）—&gt;（参数列表））{<br>代码体<br>return;<br>}<h4 id="注意事项-7"><a href="#注意事项-7" class="headerlink" title="注意事项"></a>注意事项</h4>1方法定义的先后顺序无所谓<br>2方法的定义不能产生嵌套包含关系<br>3方法定义好之后不会执行，如果想要执行，一定要进行方法的调用</li><li>如何调用方法</li><li>格式<br>方法名称（）;<br>方法体<br>方法名称的命名规则和变量一样，使用小驼峰</li><li>定义<br>方法是若干语句的功能集合<br>方法好比工厂</li><li>参数（原料）：进入方法的数据</li><li>返回值：从方法中出来的数据</li><li>返回值类型：最终产生的数据结果是什么类型</li><li>参数类型：进入方法的数据是什么类型</li><li>参数名称：进入方法的数据对应的变量名称</li><li>方法体：方法要的事情若干行代码</li><li>return：两个作用，第一停止当前方法，第二后面的结果返回值给调用处</li><li>返回值：方法执行最终产生的数据效果<h2 id="方法的三种调用格式"><a href="#方法的三种调用格式" class="headerlink" title="方法的三种调用格式"></a>方法的三种调用格式</h2>1单独调用 方法名称（参数）<br>2打印调用 System.out.println（方法名称（参数））<br>3赋值调用 数据类型 变量名称=方法名称（参数）</li><li>有参数：小括号里有内容。当一个方法需要一些数据条件，才能完成任务时，就是有参数</li><li>无参数：小括号里留空。一个方法不需要任何数据条件，自己就能独立完成任务，就是无参数</li><li>返回值：对于有返回值的方法,可以单独调用，打印调用，赋值调用</li><li>无返回值：对于无返回值的方法,只能单独调用，不能打印调用，赋值调用<h4 id="方法的注意事项"><a href="#方法的注意事项" class="headerlink" title="方法的注意事项"></a>方法的注意事项</h4>1方法应该定义在类当中，但是不能在方法当中在定义方法，不能嵌套。<br>2方法定义的先后顺序无所谓<br>3方法定义之后不会执行，如果希望执行，一定要调用<br>4方法如果有返回值一定要写上“return  返回值”，不能没有<br>5return后面的返回值类型必须和方法的返回值类型，对应起来<br>6对于一个没有返回值的方法不能return后面的返回值，只能return自己<br>7对于void方法最后一行的return可以不写<br>8一个方法可以有多个return语句，但必须保证有一个被执行到，两个return不能连写<h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2>多个方法名称一样参数列表不一样<br>方法重载与下列因素相关</li><li>参数个数不同</li><li>参数类型不同</li><li>参数多类型顺序不同</li><li>与参数返回值无关</li><li>与参数名称无关<br>在调用输出数据时，println其实进行了多种数据类型的<h1 id="jshell"><a href="#jshell" class="headerlink" title="jshell"></a>jshell</h1>退出/exit 脚本<h1 id="编译器优化"><a href="#编译器优化" class="headerlink" title="编译器优化"></a>编译器优化</h1>对于byte/short/char如果右侧值的范围内没有超过范围<br>那么javac编译器将自动隐含为我们补上(byte)(short)(char)</li><li>如果右侧没有超过左侧的范围，编译器补上强转</li><li>如果右侧超过左侧范围，那么编译器直接报错</li><li>在给变量进行赋值的时候，右侧不是变量全是常量，那么编译器javac会直接将若干个表达式计算得到结果</li><li>右侧的常量值没有超过左侧范围，所以正确，但是注意，一旦表达式中有变量参与就不能进行这种优化了。<h1 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h1><h2 id="顺序结构"><a href="#顺序结构" class="headerlink" title="顺序结构"></a>顺序结构</h2><img src="/img/115.png" alt=""><h2 id="判断结构"><a href="#判断结构" class="headerlink" title="判断结构"></a>判断结构</h2><h3 id="判断语句1—if"><a href="#判断语句1—if" class="headerlink" title="判断语句1—if"></a>判断语句1—if</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式)&#123;</span><br><span class="line">语句体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="执行流程"><a href="#执行流程" class="headerlink" title="执行流程"></a>执行流程</h5></li><li>首先判断表达式结果是true还是flase</li><li>如果是true就执行语句体</li><li>flase就不执行语句体<br><img src="/img/116.png" alt=""><h3 id="判断语句2-if-else"><a href="#判断语句2-if-else" class="headerlink" title="判断语句2-if-else"></a>判断语句2-if-else</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(关系表达式)&#123;</span><br><span class="line">    语句体<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    语句体<span class="number">2</span>;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>首先判断表达式结果是true还是flase</li><li>如果是true就执行语句体1</li><li>flase就执行语句体2<br><img src="/img/117.png" alt=""><h3 id="判断语句-if-else-if-else"><a href="#判断语句-if-else-if-else" class="headerlink" title="判断语句-if-else..if-else"></a>判断语句-if-else..if-else</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(判断条件<span class="number">1</span>)&#123;</span><br><span class="line">    执行语句<span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(判断条件<span class="number">2</span>)&#123;</span><br><span class="line">    执行语句<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">..<span class="keyword">else</span> <span class="title function_">if</span><span class="params">(判断条件n)</span>&#123;</span><br><span class="line">    执行语句n;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    执行语句n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/118.png" alt=""><h3 id="选择语句-switch"><a href="#选择语句-switch" class="headerlink" title="选择语句-switch"></a>选择语句-switch</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(表达式)&#123;</span><br><span class="line">    <span class="keyword">case</span>常量值<span class="number">1</span>:</span><br><span class="line">      语句体<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">     ... </span><br><span class="line">      <span class="keyword">case</span>常量值<span class="number">2</span>:</span><br><span class="line">      语句体<span class="number">2</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">      ...</span><br><span class="line">      <span class="keyword">default</span>:</span><br><span class="line">      语句体n+<span class="number">1</span>;</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>首先计算出表达式的值<br>其次与case依次比较，一旦有对应的值，就会执行相应的语句，在执行的过程中遇到break就结束。<br>最后，所有的case和表达式都不匹配，就会执行default语句体部分，然后程序结束掉<br><img src="/img/119.png" alt=""><h4 id="注意事项-8"><a href="#注意事项-8" class="headerlink" title="注意事项"></a>注意事项</h4></li><li>多个case后面的数值不可以重复</li><li>switch后面的小括号只能是下列数据类型：<br>基本数据类型：byte，short，int，char<br>引用数据类型：String字符串，枚举enum</li><li>switch语句格式可以很灵活：前后顺序颠倒，而且break语句可以省略</li><li>没有break会发生穿透<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><h3 id="循环语句1-for"><a href="#循环语句1-for" class="headerlink" title="循环语句1-for"></a>循环语句1-for</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span>(初始化表达式<span class="number">1</span>;布尔表达式<span class="number">2</span>;步进表达式<span class="number">4</span>)&#123;</span><br><span class="line">    循环体<span class="number">3</span>;</span><br><span class="line">    执行顺序<span class="number">1234</span>——&gt;<span class="number">234</span>-&gt;<span class="number">234</span>直到<span class="number">2</span>不满足为止</span><br><span class="line">    <span class="number">1</span>负责完成循环变量的初始化</span><br><span class="line">    <span class="number">2</span>负责判断是否满足循环条件，不满足则跳出循环</span><br><span class="line">    <span class="number">3</span>具体的执行语句</span><br><span class="line">    <span class="number">4</span>循环条件所涉及的变量的变化情况</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="/img/122.png" alt=""><h3 id="循环语句do-while"><a href="#循环语句do-while" class="headerlink" title="循环语句do-while"></a>循环语句do-while</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">初始化表达式<span class="number">1</span>&#123;</span><br><span class="line">    循环体<span class="number">3</span></span><br><span class="line">    步进表达式<span class="number">4</span></span><br><span class="line">&#125;<span class="keyword">while</span>(布尔表达式<span class="number">2</span>);</span><br><span class="line">执行顺序<span class="number">134</span>-<span class="number">234</span>-<span class="number">234</span>直到<span class="number">2</span>不满足为止</span><br><span class="line">    <span class="number">1</span>负责完成循环变量的初始化</span><br><span class="line">    <span class="number">2</span>负责判断是否满足循环条件，不满足则跳出循环</span><br><span class="line">    <span class="number">3</span>具体的执行语句</span><br><span class="line">    <span class="number">4</span>循环条件所涉及的变量的变化情况</span><br></pre></td></tr></table></figure><img src="/img/120.png" alt=""><h3 id="循环语句while"><a href="#循环语句while" class="headerlink" title="循环语句while"></a>循环语句while</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">初始化语句;</span><br><span class="line"><span class="keyword">while</span>(布尔表达式<span class="number">2</span>)&#123;</span><br><span class="line">    循环体<span class="number">3</span></span><br><span class="line">    步进表达式<span class="number">4</span></span><br><span class="line">&#125;布尔表达式<span class="number">2</span>;</span><br><span class="line">执行顺序<span class="number">134</span>-<span class="number">234</span>-<span class="number">234</span>直到<span class="number">2</span>不满足为止</span><br><span class="line">    <span class="number">1</span>负责完成循环变量的初始化</span><br><span class="line">    <span class="number">2</span>负责判断是否满足循环条件，不满足则跳出循环</span><br><span class="line">    <span class="number">3</span>具体的执行语句</span><br><span class="line">    <span class="number">4</span>循环条件所涉及的变量的变化情况</span><br></pre></td></tr></table></figure><img src="/img/123.png" alt=""><h1 id="idea快捷键"><a href="#idea快捷键" class="headerlink" title="idea快捷键"></a>idea快捷键</h1><img src="/img/124.png" alt=""><h1 id="循环控制"><a href="#循环控制" class="headerlink" title="循环控制"></a>循环控制</h1></li><li>break<br>1可以用在switch语句中，一旦执行整个switch语句立即结束<br>2还可以用在循环语句当中，一旦执行，整个循环语句立刻结束，#打断循环#</li><li>continue<br>另一个循环控制语句是continue关键字<br>一旦开始立刻跳出本次循环当前剩余内容，马上开始下一次循环<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1></li><li>数组的概念：是一种容器，可以存放多个数据值<br>1数组的特点：数组是一种引用数据类型<br>2数据当中的多个数据，类型必须统一<br>3数组的长度在运行期间不能改变</li><li>数组初始化</li><li>数组的初始化：在内存当中创建一个数组，并向其中赋予一些#默认值#<h1 id="两种常见的初始化方式"><a href="#两种常见的初始化方式" class="headerlink" title="两种常见的初始化方式"></a>两种常见的初始化方式</h1>1动态初始化(指定长度）<br>2静态初始化（指定内容）<h2 id="动态初始化数组的格式"><a href="#动态初始化数组的格式" class="headerlink" title="动态初始化数组的格式"></a>动态初始化数组的格式</h2></li><li>数据类型[ ]  数组名称=new 数组类型[数组长度]</li><li>左侧的数据类型：也就是数据当中保存的数据，全都是统一的什么类型</li><li>左侧的中括号代表我是一个数组</li><li>右侧的new代表创建数组的动作</li><li>右侧的数据类型：必须和左侧的数据类型保持一致</li><li>右侧中括号的长度也就是数组当中，到底可以保存多少个数据，是一个int数据</li><li>数据类型[ ]  数组名称=new 数组类型[]{元素1，元素2…}</li><li>省略格式   数据类型[ ]  数组名称={元素1，元素2…}<h4 id="注意事项-9"><a href="#注意事项-9" class="headerlink" title="注意事项"></a>注意事项</h4></li><li>静态初始化的标准格式可以拆分成两个步骤<br>静态初始化没有直接指定长度，但仍然会推算得到长度<br>动态初始化的标准格式可以拆分成两个步骤<br>静态格式一旦省略使用就不能拆分了<br>使用动态初始化数组时，其中的元素将自动拥有一个默认值 </li><li>如果是整数类型，那么默认为0,</li><li>如果是浮点数类型，那么默认为0.0</li><li>如果是字符类型，默认为’\u0000’,</li><li>如果是布尔值，默认为flase</li><li>如果是引用类型，默认为null</li><li>静态初始化也有默认值的过程，只不过系统自动马上将默认值替换为大括号当中的具体数值<h1 id="java内存"><a href="#java内存" class="headerlink" title="java内存"></a>java内存</h1><img src="/img/125.png" alt=""><br><img src="/img/126.png" alt=""><br><img src="/img/127.png" alt=""><br><img src="/img/128.png" alt=""><br>所有的引用类型变量，都可以赋值一个null值，但是代表什么都没有<br>数组必须初始化才能使用其中的元素，如果只是赋值了一个null，没有进行创建那么将发生空指针异常<br>如何获得数组的格式<br>数组名称.length<br>数组一旦创建,程序运行期间，长度不可以改变</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;字节&quot;&gt;&lt;a href=&quot;#字节&quot; class=&quot;headerlink&quot; title=&quot;字节&quot;&gt;&lt;/a&gt;字节&lt;/h1&gt;&lt;p&gt;位（bit）：一个数字0或者一个数字1，代表一位。&lt;br&gt;字节（Byte）:每逢8位是一个字节，也数据是存储的最小单位。&lt;br&gt;1byte=</summary>
      
    
    
    
    <category term="java" scheme="https://dingzhenchen.github.io/categories/java/"/>
    
    <category term="JAVASE" scheme="https://dingzhenchen.github.io/categories/java/JAVASE/"/>
    
    <category term="基础知识" scheme="https://dingzhenchen.github.io/categories/java/JAVASE/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    
    <category term="javase" scheme="https://dingzhenchen.github.io/tags/javase/"/>
    
  </entry>
  
</feed>
